{"ast":null,"code":"import axios from 'axios';\nconst clientId = '7c6b8a3ea0e3406b9d8e5974be8b442b';\nconst clientSecret = '49aa02d0a85249279ae8ab73bbef28f5';\nconst lastFmApiKey = '28c425ac5fe3a7288e17efe8d7f9f82c';\nlet spotifyToken = null;\nlet tokenExpiry = null;\nconst lastFmCache = {};\nconst getSpotifyToken = async () => {\n  if (spotifyToken && tokenExpiry && tokenExpiry > Date.now()) {\n    return spotifyToken;\n  }\n  const response = await axios.post('https://accounts.spotify.com/api/token', null, {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Authorization': `Basic ${btoa(`${clientId}:${clientSecret}`)}`\n    },\n    params: {\n      grant_type: 'client_credentials'\n    }\n  });\n  spotifyToken = response.data.access_token;\n  tokenExpiry = Date.now() + response.data.expires_in * 1000;\n  return spotifyToken;\n};\nconst getSpotifyTopTracks = async () => {\n  const token = await getSpotifyToken();\n  const response = await axios.get('https://api.spotify.com/v1/playlists/37i9dQZEVXbMDoHDwVN2tF/tracks', {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    params: {\n      market: 'US',\n      limit: 25\n    }\n  });\n  return response.data.items.map(item => {\n    var _item$track$album$ima;\n    return {\n      id: item.track.id,\n      name: item.track.name,\n      artist: item.track.artists[0].name,\n      artistId: item.track.artists[0].id,\n      image: ((_item$track$album$ima = item.track.album.images[1]) === null || _item$track$album$ima === void 0 ? void 0 : _item$track$album$ima.url) || ''\n    };\n  });\n};\nconst getTrackDetails = async trackId => {\n  const token = await getSpotifyToken();\n  const response = await axios.get(`https://api.spotify.com/v1/tracks/${trackId}`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  return response.data;\n};\nconst getArtistDetails = async artistId => {\n  const token = await getSpotifyToken();\n  const response = await axios.get(`https://api.spotify.com/v1/artists/${artistId}`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  return response.data;\n};\nconst getLastFmStreams = async (track, artist) => {\n  const cacheKey = `${track}-${artist}`;\n  if (lastFmCache[cacheKey]) {\n    return lastFmCache[cacheKey];\n  }\n  try {\n    const response = await axios.get('https://ws.audioscrobbler.com/2.0/', {\n      params: {\n        method: 'track.getInfo',\n        api_key: lastFmApiKey,\n        artist: artist,\n        track: track,\n        format: 'json'\n      }\n    });\n    console.log('Last.fm response:', response.data);\n    if (response.data && response.data.track) {\n      lastFmCache[cacheKey] = response.data.track.playcount;\n      return response.data.track.playcount;\n    }\n  } catch (err) {\n    console.error('Failed to fetch Last.fm streams', err);\n  }\n  return 'N/A';\n};\nexport { getSpotifyTopTracks, getTrackDetails, getArtistDetails, getLastFmStreams };","map":{"version":3,"names":["axios","clientId","clientSecret","lastFmApiKey","spotifyToken","tokenExpiry","lastFmCache","getSpotifyToken","Date","now","response","post","headers","btoa","params","grant_type","data","access_token","expires_in","getSpotifyTopTracks","token","get","market","limit","items","map","item","_item$track$album$ima","id","track","name","artist","artists","artistId","image","album","images","url","getTrackDetails","trackId","getArtistDetails","getLastFmStreams","cacheKey","method","api_key","format","console","log","playcount","err","error"],"sources":["/Users/peter/Documents/SUMMER 2024/SEG3125/tunescout/src/components/API.js"],"sourcesContent":["import axios from 'axios';\n\nconst clientId = '7c6b8a3ea0e3406b9d8e5974be8b442b';\nconst clientSecret = '49aa02d0a85249279ae8ab73bbef28f5';\nconst lastFmApiKey = '28c425ac5fe3a7288e17efe8d7f9f82c';\n\nlet spotifyToken = null;\nlet tokenExpiry = null;\nconst lastFmCache = {};\n\nconst getSpotifyToken = async () => {\n  if (spotifyToken && tokenExpiry && tokenExpiry > Date.now()) {\n    return spotifyToken;\n  }\n\n  const response = await axios.post('https://accounts.spotify.com/api/token', null, {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Authorization': `Basic ${btoa(`${clientId}:${clientSecret}`)}`\n    },\n    params: {\n      grant_type: 'client_credentials'\n    }\n  });\n\n  spotifyToken = response.data.access_token;\n  tokenExpiry = Date.now() + response.data.expires_in * 1000;\n  return spotifyToken;\n};\n\nconst getSpotifyTopTracks = async () => {\n  const token = await getSpotifyToken();\n  const response = await axios.get('https://api.spotify.com/v1/playlists/37i9dQZEVXbMDoHDwVN2tF/tracks', {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    params: {\n      market: 'US',\n      limit: 25\n    }\n  });\n\n  return response.data.items.map(item => ({\n    id: item.track.id,\n    name: item.track.name,\n    artist: item.track.artists[0].name,\n    artistId: item.track.artists[0].id,\n    image: item.track.album.images[1]?.url || '',\n  }));\n};\n\nconst getTrackDetails = async (trackId) => {\n  const token = await getSpotifyToken();\n  const response = await axios.get(`https://api.spotify.com/v1/tracks/${trackId}`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n\n  return response.data;\n};\n\nconst getArtistDetails = async (artistId) => {\n  const token = await getSpotifyToken();\n  const response = await axios.get(`https://api.spotify.com/v1/artists/${artistId}`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n\n  return response.data;\n};\n\nconst getLastFmStreams = async (track, artist) => {\n  const cacheKey = `${track}-${artist}`;\n  if (lastFmCache[cacheKey]) {\n    return lastFmCache[cacheKey];\n  }\n\n  try {\n    const response = await axios.get('https://ws.audioscrobbler.com/2.0/', {\n      params: {\n        method: 'track.getInfo',\n        api_key: lastFmApiKey,\n        artist: artist,\n        track: track,\n        format: 'json'\n      }\n    });\n    console.log('Last.fm response:', response.data);\n    if (response.data && response.data.track) {\n      lastFmCache[cacheKey] = response.data.track.playcount;\n      return response.data.track.playcount;\n    }\n  } catch (err) {\n    console.error('Failed to fetch Last.fm streams', err);\n  }\n  return 'N/A';\n};\n\nexport { getSpotifyTopTracks, getTrackDetails, getArtistDetails, getLastFmStreams };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}