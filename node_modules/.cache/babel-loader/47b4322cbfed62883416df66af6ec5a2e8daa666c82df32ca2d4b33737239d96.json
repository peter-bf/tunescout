{"ast":null,"code":"import axios from 'axios';\nconst lastFmApiKey = '28c425ac5fe3a7288e17efe8d7f9f82c';\nconst getLastFmTopTracks = async () => {\n  try {\n    const response = await axios.get('https://ws.audioscrobbler.com/2.0/', {\n      params: {\n        method: 'chart.gettoptracks',\n        api_key: lastFmApiKey,\n        format: 'json',\n        limit: 50\n      }\n    });\n    return response.data.tracks.track.map(track => ({\n      id: track.mbid,\n      name: track.name,\n      artist: track.artist.name,\n      image: track.image[2]['#text'],\n      // Using the medium-sized image\n      playcount: track.playcount\n    }));\n  } catch (error) {\n    console.error('Failed to fetch Last.FM top tracks', error);\n    return [];\n  }\n};\nconst getLastFmTopArtists = async (limit = 50) => {\n  try {\n    const response = await axios.get('https://ws.audioscrobbler.com/2.0/', {\n      params: {\n        method: 'chart.gettopartists',\n        api_key: lastFmApiKey,\n        format: 'json',\n        limit\n      }\n    });\n    return response.data.artists.artist.map(artist => ({\n      id: artist.mbid,\n      name: artist.name,\n      genres: [],\n      // Last.FM doesn't provide genres in this call\n      followers: artist.listeners,\n      popularity: artist.playcount,\n      images: [{\n        url: artist.image[2]['#text']\n      }] // Using the medium-sized image\n    }));\n  } catch (error) {\n    console.error('Failed to fetch Last.FM top artists', error);\n    return [];\n  }\n};\nconst getLastFmTrackDetails = async trackId => {\n  try {\n    const response = await axios.get('https://ws.audioscrobbler.com/2.0/', {\n      params: {\n        method: 'track.getInfo',\n        api_key: lastFmApiKey,\n        mbid: trackId,\n        format: 'json'\n      }\n    });\n    return response.data.track;\n  } catch (error) {\n    console.error('Failed to fetch Last.FM track details', error);\n    return null;\n  }\n};\nconst getLastFmArtistDetails = async artistId => {\n  try {\n    const response = await axios.get('https://ws.audioscrobbler.com/2.0/', {\n      params: {\n        method: 'artist.getInfo',\n        api_key: lastFmApiKey,\n        mbid: artistId,\n        format: 'json'\n      }\n    });\n    return response.data.artist;\n  } catch (error) {\n    console.error('Failed to fetch Last.FM artist details', error);\n    return null;\n  }\n};\nexport { getLastFmTopArtists, getLastFmTopTracks, getLastFmTrackDetails, getLastFmArtistDetails };","map":{"version":3,"names":["axios","lastFmApiKey","getLastFmTopTracks","response","get","params","method","api_key","format","limit","data","tracks","track","map","id","mbid","name","artist","image","playcount","error","console","getLastFmTopArtists","artists","genres","followers","listeners","popularity","images","url","getLastFmTrackDetails","trackId","getLastFmArtistDetails","artistId"],"sources":["/Users/peter/Documents/SUMMER 2024/SEG3125/tunescout/src/components/API.js"],"sourcesContent":["import axios from 'axios';\n\nconst lastFmApiKey = '28c425ac5fe3a7288e17efe8d7f9f82c';\n\nconst getLastFmTopTracks = async () => {\n  try {\n    const response = await axios.get('https://ws.audioscrobbler.com/2.0/', {\n      params: {\n        method: 'chart.gettoptracks',\n        api_key: lastFmApiKey,\n        format: 'json',\n        limit: 50\n      }\n    });\n    return response.data.tracks.track.map(track => ({\n      id: track.mbid,\n      name: track.name,\n      artist: track.artist.name,\n      image: track.image[2]['#text'], // Using the medium-sized image\n      playcount: track.playcount\n    }));\n  } catch (error) {\n    console.error('Failed to fetch Last.FM top tracks', error);\n    return [];\n  }\n};\n\nconst getLastFmTopArtists = async (limit = 50) => {\n  try {\n    const response = await axios.get('https://ws.audioscrobbler.com/2.0/', {\n      params: {\n        method: 'chart.gettopartists',\n        api_key: lastFmApiKey,\n        format: 'json',\n        limit\n      }\n    });\n    return response.data.artists.artist.map(artist => ({\n      id: artist.mbid,\n      name: artist.name,\n      genres: [], // Last.FM doesn't provide genres in this call\n      followers: artist.listeners,\n      popularity: artist.playcount,\n      images: [{ url: artist.image[2]['#text'] }], // Using the medium-sized image\n    }));\n  } catch (error) {\n    console.error('Failed to fetch Last.FM top artists', error);\n    return [];\n  }\n};\n\nconst getLastFmTrackDetails = async (trackId) => {\n  try {\n    const response = await axios.get('https://ws.audioscrobbler.com/2.0/', {\n      params: {\n        method: 'track.getInfo',\n        api_key: lastFmApiKey,\n        mbid: trackId,\n        format: 'json'\n      }\n    });\n    return response.data.track;\n  } catch (error) {\n    console.error('Failed to fetch Last.FM track details', error);\n    return null;\n  }\n};\n\nconst getLastFmArtistDetails = async (artistId) => {\n  try {\n    const response = await axios.get('https://ws.audioscrobbler.com/2.0/', {\n      params: {\n        method: 'artist.getInfo',\n        api_key: lastFmApiKey,\n        mbid: artistId,\n        format: 'json'\n      }\n    });\n    return response.data.artist;\n  } catch (error) {\n    console.error('Failed to fetch Last.FM artist details', error);\n    return null;\n  }\n};\n\nexport { getLastFmTopArtists, getLastFmTopTracks, getLastFmTrackDetails, getLastFmArtistDetails };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}