{"ast":null,"code":"import axios from 'axios';\n\n// Please don't do anything bad with these!!!!\nconst clientId = '7c6b8a3ea0e3406b9d8e5974be8b442b';\nconst clientSecret = '49aa02d0a85249279ae8ab73bbef28f5';\nconst lastFmApiKey = '28c425ac5fe3a7288e17efe8d7f9f82c';\nlet spotifyToken = null;\nlet tokenExpiry = null;\nconst getSpotifyToken = async () => {\n  if (spotifyToken && tokenExpiry && tokenExpiry > Date.now()) {\n    return spotifyToken;\n  }\n  const response = await axios.post('https://accounts.spotify.com/api/token', null, {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Authorization': `Basic ${btoa(`${clientId}:${clientSecret}`)}`\n    },\n    params: {\n      grant_type: 'client_credentials'\n    }\n  });\n  spotifyToken = response.data.access_token;\n  tokenExpiry = Date.now() + response.data.expires_in * 1000;\n  return spotifyToken;\n};\nconst getSpotifyTrackDetails = async (trackName, artistName) => {\n  const token = await getSpotifyToken();\n  const response = await axios.get('https://api.spotify.com/v1/search', {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    params: {\n      q: `track:${trackName} artist:${artistName}`,\n      type: 'track',\n      limit: 1\n    }\n  });\n  if (response.data.tracks.items.length > 0) {\n    return response.data.tracks.items[0];\n  }\n  return null;\n};\nconst getSpotifyTrackImages = async (trackName, artistName) => {\n  var _track$album, _track$album$images$;\n  const track = await getSpotifyTrackDetails(trackName, artistName);\n  return (track === null || track === void 0 ? void 0 : (_track$album = track.album) === null || _track$album === void 0 ? void 0 : (_track$album$images$ = _track$album.images[1]) === null || _track$album$images$ === void 0 ? void 0 : _track$album$images$.url) || '';\n};\nconst getSpotifyArtistDetails = async artistName => {\n  const token = await getSpotifyToken();\n  const response = await axios.get('https://api.spotify.com/v1/search', {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    params: {\n      q: `artist:${artistName}`,\n      type: 'artist',\n      limit: 1\n    }\n  });\n  if (response.data.artists.items.length > 0) {\n    return response.data.artists.items[0];\n  }\n  return null;\n};\nconst getLastFmTopTracks = async () => {\n  try {\n    const response = await axios.get('https://ws.audioscrobbler.com/2.0/', {\n      params: {\n        method: 'chart.gettoptracks',\n        api_key: lastFmApiKey,\n        format: 'json',\n        limit: 50\n      }\n    });\n    return Promise.all(response.data.tracks.track.map(async track => {\n      const image = await getSpotifyTrackImages(track.name, track.artist.name);\n      const spotifyDetails = await getSpotifyTrackDetails(track.name, track.artist.name);\n      return {\n        id: track.mbid || track.name,\n        // Use name as fallback if mbid is not available\n        name: track.name,\n        artist: track.artist.name,\n        image,\n        playcount: track.playcount,\n        spotifyDetails\n      };\n    }));\n  } catch (error) {\n    console.error('Failed to fetch Last.FM top tracks', error);\n    return [];\n  }\n};\nconst getLastFmTopArtists = async (limit = 50) => {\n  try {\n    const response = await axios.get('https://ws.audioscrobbler.com/2.0/', {\n      params: {\n        method: 'chart.gettopartists',\n        api_key: lastFmApiKey,\n        format: 'json',\n        limit\n      }\n    });\n    return Promise.all(response.data.artists.artist.map(async artist => {\n      const spotifyDetails = await getSpotifyArtistDetails(artist.name);\n      return {\n        id: artist.mbid,\n        name: artist.name,\n        genres: (spotifyDetails === null || spotifyDetails === void 0 ? void 0 : spotifyDetails.genres) || [],\n        followers: (spotifyDetails === null || spotifyDetails === void 0 ? void 0 : spotifyDetails.followers.total) || artist.listeners,\n        popularity: (spotifyDetails === null || spotifyDetails === void 0 ? void 0 : spotifyDetails.popularity) || artist.playcount,\n        images: (spotifyDetails === null || spotifyDetails === void 0 ? void 0 : spotifyDetails.images) || [{\n          url: artist.image[2]['#text']\n        }] // Using the medium-sized image\n      };\n    }));\n  } catch (error) {\n    console.error('Failed to fetch Last.FM top artists', error);\n    return [];\n  }\n};\nconst getLastFmTrackDetails = async trackId => {\n  try {\n    const response = await axios.get('https://ws.audioscrobbler.com/2.0/', {\n      params: {\n        method: 'track.getInfo',\n        api_key: lastFmApiKey,\n        mbid: trackId,\n        format: 'json'\n      }\n    });\n    return response.data.track;\n  } catch (error) {\n    console.error('Failed to fetch Last.FM track details', error);\n    return null;\n  }\n};\nconst getLastFmTrackTags = async (artist, track) => {\n  try {\n    const response = await axios.get('https://ws.audioscrobbler.com/2.0/', {\n      params: {\n        method: 'track.getTopTags',\n        api_key: lastFmApiKey,\n        artist: artist,\n        track: track,\n        format: 'json'\n      }\n    });\n    return response.data.toptags.tag.map(tag => tag.name);\n  } catch (error) {\n    console.error('Failed to fetch Last.FM track tags', error);\n    return [];\n  }\n};\nconst getLastFmArtistDetails = async artist => {\n  try {\n    const response = await axios.get('https://ws.audioscrobbler.com/2.0/', {\n      params: {\n        method: 'artist.getInfo',\n        api_key: lastFmApiKey,\n        artist: artist,\n        format: 'json'\n      }\n    });\n    const artistData = response.data.artist;\n    return {\n      ...artistData,\n      images: artistData.image.map(img => ({\n        url: img['#text']\n      }))\n    };\n  } catch (error) {\n    console.error('Failed to fetch Last.FM artist details', error);\n    return null;\n  }\n};\nexport { getLastFmTopTracks, getLastFmTopArtists, getLastFmTrackDetails, getLastFmArtistDetails, getLastFmTrackTags, getSpotifyTrackDetails, getSpotifyArtistDetails, getSpotifyToken };","map":{"version":3,"names":["axios","clientId","clientSecret","lastFmApiKey","spotifyToken","tokenExpiry","getSpotifyToken","Date","now","response","post","headers","btoa","params","grant_type","data","access_token","expires_in","getSpotifyTrackDetails","trackName","artistName","token","get","q","type","limit","tracks","items","length","getSpotifyTrackImages","_track$album","_track$album$images$","track","album","images","url","getSpotifyArtistDetails","artists","getLastFmTopTracks","method","api_key","format","Promise","all","map","image","name","artist","spotifyDetails","id","mbid","playcount","error","console","getLastFmTopArtists","genres","followers","total","listeners","popularity","getLastFmTrackDetails","trackId","getLastFmTrackTags","toptags","tag","getLastFmArtistDetails","artistData","img"],"sources":["/Users/peter/Documents/SUMMER 2024/SEG3125/tunescout/src/components/API.js"],"sourcesContent":["import axios from 'axios';\n\n// Please don't do anything bad with these!!!!\nconst clientId = '7c6b8a3ea0e3406b9d8e5974be8b442b';\nconst clientSecret = '49aa02d0a85249279ae8ab73bbef28f5';\nconst lastFmApiKey = '28c425ac5fe3a7288e17efe8d7f9f82c';\n\nlet spotifyToken = null;\nlet tokenExpiry = null;\n\nconst getSpotifyToken = async () => {\n  if (spotifyToken && tokenExpiry && tokenExpiry > Date.now()) {\n    return spotifyToken;\n  }\n\n  const response = await axios.post('https://accounts.spotify.com/api/token', null, {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Authorization': `Basic ${btoa(`${clientId}:${clientSecret}`)}`\n    },\n    params: {\n      grant_type: 'client_credentials'\n    }\n  });\n\n  spotifyToken = response.data.access_token;\n  tokenExpiry = Date.now() + response.data.expires_in * 1000;\n  return spotifyToken;\n};\n\nconst getSpotifyTrackDetails = async (trackName, artistName) => {\n  const token = await getSpotifyToken();\n  const response = await axios.get('https://api.spotify.com/v1/search', {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    params: {\n      q: `track:${trackName} artist:${artistName}`,\n      type: 'track',\n      limit: 1\n    }\n  });\n\n  if (response.data.tracks.items.length > 0) {\n    return response.data.tracks.items[0];\n  }\n\n  return null;\n};\n\nconst getSpotifyTrackImages = async (trackName, artistName) => {\n  const track = await getSpotifyTrackDetails(trackName, artistName);\n  return track?.album?.images[1]?.url || '';\n};\n\nconst getSpotifyArtistDetails = async (artistName) => {\n  const token = await getSpotifyToken();\n  const response = await axios.get('https://api.spotify.com/v1/search', {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    params: {\n      q: `artist:${artistName}`,\n      type: 'artist',\n      limit: 1\n    }\n  });\n\n  if (response.data.artists.items.length > 0) {\n    return response.data.artists.items[0];\n  }\n\n  return null;\n};\n\nconst getLastFmTopTracks = async () => {\n  try {\n    const response = await axios.get('https://ws.audioscrobbler.com/2.0/', {\n      params: {\n        method: 'chart.gettoptracks',\n        api_key: lastFmApiKey,\n        format: 'json',\n        limit: 50\n      }\n    });\n    return Promise.all(response.data.tracks.track.map(async (track) => {\n      const image = await getSpotifyTrackImages(track.name, track.artist.name);\n      const spotifyDetails = await getSpotifyTrackDetails(track.name, track.artist.name);\n      return {\n        id: track.mbid || track.name, // Use name as fallback if mbid is not available\n        name: track.name,\n        artist: track.artist.name,\n        image,\n        playcount: track.playcount,\n        spotifyDetails\n      };\n    }));\n  } catch (error) {\n    console.error('Failed to fetch Last.FM top tracks', error);\n    return [];\n  }\n};\n\nconst getLastFmTopArtists = async (limit = 50) => {\n  try {\n    const response = await axios.get('https://ws.audioscrobbler.com/2.0/', {\n      params: {\n        method: 'chart.gettopartists',\n        api_key: lastFmApiKey,\n        format: 'json',\n        limit\n      }\n    });\n    return Promise.all(response.data.artists.artist.map(async (artist) => {\n      const spotifyDetails = await getSpotifyArtistDetails(artist.name);\n      return {\n        id: artist.mbid,\n        name: artist.name,\n        genres: spotifyDetails?.genres || [],\n        followers: spotifyDetails?.followers.total || artist.listeners,\n        popularity: spotifyDetails?.popularity || artist.playcount,\n        images: spotifyDetails?.images || [{ url: artist.image[2]['#text'] }] // Using the medium-sized image\n      };\n    }));\n  } catch (error) {\n    console.error('Failed to fetch Last.FM top artists', error);\n    return [];\n  }\n};\n\nconst getLastFmTrackDetails = async (trackId) => {\n  try {\n    const response = await axios.get('https://ws.audioscrobbler.com/2.0/', {\n      params: {\n        method: 'track.getInfo',\n        api_key: lastFmApiKey,\n        mbid: trackId,\n        format: 'json'\n      }\n    });\n    return response.data.track;\n  } catch (error) {\n    console.error('Failed to fetch Last.FM track details', error);\n    return null;\n  }\n};\n\nconst getLastFmTrackTags = async (artist, track) => {\n  try {\n    const response = await axios.get('https://ws.audioscrobbler.com/2.0/', {\n      params: {\n        method: 'track.getTopTags',\n        api_key: lastFmApiKey,\n        artist: artist,\n        track: track,\n        format: 'json'\n      }\n    });\n    return response.data.toptags.tag.map(tag => tag.name);\n  } catch (error) {\n    console.error('Failed to fetch Last.FM track tags', error);\n    return [];\n  }\n};\n\nconst getLastFmArtistDetails = async (artist) => {\n  try {\n    const response = await axios.get('https://ws.audioscrobbler.com/2.0/', {\n      params: {\n        method: 'artist.getInfo',\n        api_key: lastFmApiKey,\n        artist: artist,\n        format: 'json'\n      }\n    });\n    const artistData = response.data.artist;\n    return {\n      ...artistData,\n      images: artistData.image.map(img => ({ url: img['#text'] }))\n    };\n  } catch (error) {\n    console.error('Failed to fetch Last.FM artist details', error);\n    return null;\n  }\n};\n\nexport { getLastFmTopTracks, getLastFmTopArtists, getLastFmTrackDetails, getLastFmArtistDetails, getLastFmTrackTags, getSpotifyTrackDetails, getSpotifyArtistDetails, getSpotifyToken };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}